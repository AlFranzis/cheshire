package al.franzis.cheshire;

import al.franzis.cheshire.service.ServiceProcessor;
import org.eclipse.xtend.core.compiler.batch.XtendCompilerTester;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;

@SuppressWarnings("all")
public class ServiceTest {
  @Extension
  private XtendCompilerTester compilerTester = XtendCompilerTester.newXtendCompilerTester(ServiceProcessor.class);
  
  @Test
  public void testServiceProcessing() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList");
    _builder.newLine();
    _builder.append("import java.util.List");
    _builder.newLine();
    _builder.append("import al.franzis.cheshire.service.ServiceBindMethod");
    _builder.newLine();
    _builder.append("import al.franzis.cheshire.service.Service");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class PluginManagerServiceDefinition2 implements IServiceDefinition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def String name() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"pluginManager2\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def String implementation() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"cheshire.test.cdi.service.PluginManager2\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def List<String> referencedServices() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#[\"cheshire.test.cdi.service.IPlugin\"]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def List<String> providedServices() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#[\"cheshire.test.cdi.service.IPluginManager\"]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override def Map<String,String> properties() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("#{ \"Prop1\" -> \"Value1\", \"Prop2\" -> \"Value2\"}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Service(definition=PluginManagerServiceDefinition2)");
    _builder.newLine();
    _builder.append("class PluginManager2 {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("val plugins = new ArrayList<IPlugin>()");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("override List<IPlugin> getPlugins() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plugins");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@ServiceBindMethod");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("def void addPlugin( IPlugin plugin ) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("plugins.add(plugin)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\t\t\t");
    _builder_1.newLine();
    this.compilerTester.assertCompilesTo(_builder, _builder_1);
  }
}
